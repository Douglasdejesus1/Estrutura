package one.aula4;

public class ListasEncadeadas {
	public static void main(String[] args) {
		
		ListaEncadeada<String> minhaListaEncadeada = new ListaEncadeada<>();
		
		minhaListaEncadeada.add("teste1");
		minhaListaEncadeada.add("teste2");
		minhaListaEncadeada.add("teste3");
		minhaListaEncadeada.add("teste4");
		
		System.out.println(minhaListaEncadeada.get(5));
	}
}

class No<T> {
	private T conteudo;
	private No proximoNo =null;



	public No(T conteudo) {	
		this.conteudo = conteudo;
	}

	public No(T conteudo, No proximoNo) {
		this.conteudo = conteudo;
		this.proximoNo = proximoNo;
	}

	public T getConteudo() {
		return conteudo;
	}

	public void setConteudo(T conteudo) {
		this.conteudo = conteudo;
	}

	public No getProximoNo() {
		return proximoNo;
	}

	public void setProximoNo(No proximoNo) {
		this.proximoNo = proximoNo;
	}

	@Override
	public String toString() {
		return "No [conteudo=" + conteudo + "]";
	}

	public String toStringEncadeado() {
		String str = "No [conteudo=" + conteudo + "]";

		if (proximoNo != null) {
			str += "->" + proximoNo.toString();
		} else {
			str += "->" + null;
		}
		return str;
	}

}

class ListaEncadeada<T> {

	No<T> referenciaEntrada;

	public ListaEncadeada() {
		this.referenciaEntrada = null;
	}
	
	public void add(T conteudo) {
		
		No<T> novoNo = new No<>(conteudo);
		if (this.isEmpty()) {
			referenciaEntrada = novoNo;
			return;
		}
		
		
		No<T> noAuxiliar = referenciaEntrada;
		for (int i = 0; i < this.size() - 1; i++) {
			noAuxiliar = noAuxiliar.getProximoNo();
		}
		noAuxiliar.setProximoNo(novoNo);
	}
	
	private No<T> getNo(int index) {
		//validaIndice(index);
		No<T> noAuxiliar= referenciaEntrada;
		No<T> noRetorno= null;
		
		for (int i = 0; i <= index; i++) {
			noRetorno = noAuxiliar;
			noAuxiliar = noAuxiliar.getProximoNo();
		}
		return noRetorno;
	}
	
	public T get(int index) {
		return getNo(index).getConteudo();
	}

	private void validaIndice(int index) {
		if (index >= size()) {
			int ultimoIndice = size() - 1;
			throw new IndexOutOfBoundsException("Não existe conteúdo no indice: " + index + " desta lista"
					+ ". Esta lista só vali até o indice: " + ultimoIndice);
		}
	}
	public T remove(int index) {
		No <T> noPivor = this.getNo(index);
		if(index == 0) {
			referenciaEntrada = noPivor.getProximoNo();
			return noPivor.getConteudo();
		}
		No<T> noAnterior = getNo(index-1);
		noAnterior.setProximoNo(noPivor.getProximoNo());
		return noPivor.getConteudo();
	}

	public int size() {
		int tamanhoLista = 0;
		No<T> referenciaAux = referenciaEntrada;
		while (true) {
			if (referenciaAux != null) {
				tamanhoLista++;
				if (referenciaAux.getProximoNo() != null) {
					referenciaAux = referenciaAux.getProximoNo();
				} else {
					break;
				}
			} else {
				break;
			}
		}
		return tamanhoLista;
	}

	public boolean isEmpty() {
		return referenciaEntrada == null ? true : false;
	}

	@Override
	public String toString() {
		String strReturno ="";
		No<T> noAuxiliar = referenciaEntrada;
		for(int i=0; i<this.size();i++) {
			strReturno+= "[No{conteudo="+noAuxiliar.getConteudo()+"}]===>";
			noAuxiliar = noAuxiliar.getProximoNo();
		}
		strReturno+="null";
		return strReturno;
	}
	
	

}